# client<->ats-be metrics
# histogram trafficserver_backend_client_ttfb
counter trafficserver_backend_client_ttfb_bucket by le, backend
counter trafficserver_backend_client_ttfb_sum by backend
counter trafficserver_backend_client_ttfb_count by backend

counter trafficserver_backend_client_cache_read_time_sum by backend
counter trafficserver_backend_client_cache_write_time_sum by backend

# ats-be<->origin metrics
# histogram trafficserver_backend_requests_seconds
counter trafficserver_backend_requests_seconds_bucket by le, method, backend
counter trafficserver_backend_requests_seconds_sum by status, method, backend
counter trafficserver_backend_requests_seconds_count by status, method, backend

counter trafficserver_backend_connections_total by backend

# This block matches all log lines, regardless of the cache status. Hits,
# misses, and passes are all included.
/ClientTTFB:(?P<client_ttfb>[0-9]+).*CacheReadTime:(?P<cache_read_time>[0-9]+).*CacheWriteTime:(?P<cache_write_time>[0-9]+).*OriginServer:(?P<backend>\S+)/ {
  trafficserver_backend_client_ttfb_sum[$backend] += $client_ttfb
  trafficserver_backend_client_cache_read_time_sum[$backend] += $cache_read_time
  trafficserver_backend_client_cache_write_time_sum[$backend] += $cache_write_time

  trafficserver_backend_client_ttfb_count[$backend]++

  $client_ttfb < 45 {
    trafficserver_backend_client_ttfb_bucket["0.045"][$backend]++
  }
  $client_ttfb < 70 {
    trafficserver_backend_client_ttfb_bucket["0.07"][$backend]++
  }
  $client_ttfb < 100 {
    trafficserver_backend_client_ttfb_bucket["0.1"][$backend]++
  }
  $client_ttfb < 150 {
    trafficserver_backend_client_ttfb_bucket["0.15"][$backend]++
  }
  $client_ttfb < 250 {
    trafficserver_backend_client_ttfb_bucket["0.25"][$backend]++
  }
  $client_ttfb < 350 {
    trafficserver_backend_client_ttfb_bucket["0.35"][$backend]++
  }
  $client_ttfb < 500 {
    trafficserver_backend_client_ttfb_bucket["0.5"][$backend]++
  }
  $client_ttfb < 750 {
    trafficserver_backend_client_ttfb_bucket["0.75"][$backend]++
  }
  $client_ttfb < 1200 {
    trafficserver_backend_client_ttfb_bucket["1.2"][$backend]++
  }
  $client_ttfb < 3000 {
    trafficserver_backend_client_ttfb_bucket["3.0"][$backend]++
  }
  $client_ttfb < 10000 {
    trafficserver_backend_client_ttfb_bucket["10.0"][$backend]++
  }
  $client_ttfb < 30000 {
    trafficserver_backend_client_ttfb_bucket["30.0"][$backend]++
  }
  $client_ttfb < 60000 {
    trafficserver_backend_client_ttfb_bucket["60.0"][$backend]++
  }
  trafficserver_backend_client_ttfb_bucket["+Inf"][$backend]++
}

# Log entries representing cache hits have OriginStatus:000.
# Match OriginStatus:[1-9][0-9][0-9] to exclude those.
/ConnReuse:(?P<conn_reuse>[0-9]+).*TTFetchHeaders:(?P<origin_ttfb>[0-9.]+).*OriginServer:(?P<backend>\S+).*ReqMethod:(?P<method>[A-Z]+).*OriginStatus:(?P<status>[1-9][0-9][0-9])/ {
  trafficserver_backend_requests_seconds_count[$status][$method][$backend]++

  # A new TCP connection was established if conn_reuse is 0
  $conn_reuse == 0 {
    trafficserver_backend_connections_total[$backend]++
  }

  # ttfb is in milliseconds, and we want seconds.
  trafficserver_backend_requests_seconds_sum[$status][$method][$backend] += $origin_ttfb / 1000.0

  # these statements "fall through", so the histogram is cumulative. The
  # collecting system can compute the percentile bands by taking the ratio of
  # each bucket value over the final bucket.
  $origin_ttfb < 45 {
    trafficserver_backend_requests_seconds_bucket["0.045"][$method][$backend]++
  }
  $origin_ttfb < 70 {
    trafficserver_backend_requests_seconds_bucket["0.07"][$method][$backend]++
  }
  $origin_ttfb < 100 {
    trafficserver_backend_requests_seconds_bucket["0.1"][$method][$backend]++
  }
  $origin_ttfb < 150 {
    trafficserver_backend_requests_seconds_bucket["0.15"][$method][$backend]++
  }
  $origin_ttfb < 250 {
    trafficserver_backend_requests_seconds_bucket["0.25"][$method][$backend]++
  }
  $origin_ttfb < 350 {
    trafficserver_backend_requests_seconds_bucket["0.35"][$method][$backend]++
  }
  $origin_ttfb < 500 {
    trafficserver_backend_requests_seconds_bucket["0.5"][$method][$backend]++
  }
  $origin_ttfb < 750 {
    trafficserver_backend_requests_seconds_bucket["0.75"][$method][$backend]++
  }
  $origin_ttfb < 1200 {
    trafficserver_backend_requests_seconds_bucket["1.2"][$method][$backend]++
  }
  trafficserver_backend_requests_seconds_bucket["+Inf"][$method][$backend]++
}
