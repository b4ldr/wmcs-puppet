# Copyright 2020 Wikimedia Foundation and contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

lua_package_path "/etc/nginx/lua/?.lua";

map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
}

# do XFF conditionally, only for a selected set of FQDNs
map $http_host $xff {
    # no default, so nginx sets an empty string!
    <% @xff_fqdns.each do |fqdn| -%>
    <%= fqdn %> $proxy_add_x_forwarded_for;
    <% end %>
}

geo $bad_user {
  default 0;
  # 0: OK, 1: banned
  # 1.2.3.4 1;     # ban single IP
  # 1.2.3.4/24 1;  # ban IP block
  <% @banned_ips.each do |val| -%>
  <%= val %> 1;
  <% end -%>
}

<%- if @https_upgrade -%>
server {
    listen 80 default_server;
    server_name _;
    # 308 is the more proper return code, but lots of crappy old clients do
    # not understand it. So we will instead stick with the ancient 301 and
    # hope that not too many things break on POST.
    return 301 https://$host$request_uri;
}
<%- end -%>

server {
    resolver <%= @resolver %>;

    <%- if @ssl_certificate_name != false -%>
    # Serve both HTTP and HTTPS
    listen 443 ssl http2;

    <%- if @use_acme_chief -%>
    ssl_certificate /etc/acmecerts/<%= @ssl_certificate_name %>/live/rsa-2048.chained.crt;
    ssl_certificate_key /etc/acmecerts/<%= @ssl_certificate_name %>/live/rsa-2048.key;
    <%- else -%>
    ssl_certificate /etc/ssl/localcerts/<%= @ssl_certificate_name %>.chained.crt;
    ssl_certificate_key /etc/ssl/private/<%= @ssl_certificate_name %>.key;
    <%- end -%>

    # Copied from modules/tlsproxy/templates/nginx.conf.erb. Eugh
    # Enable a shared cache, since it is defined at this level
    # it will be used for all virtual hosts. 1m = 4000 active sessions,
    # so we are allowing 200,000 active sessions.
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 5m;

    <%= @ssl_settings.join("\n    ") %>
    <%- end -%>

    listen 80;

    <%- if @https_upgrade -%>
    # http -> https redirects handled by separate server block above.
    # T120486: 366 days
    add_header Strict-Transport-Security "max-age=31622400";
    <%- end -%>

    # Some projects have tools that take data in and process them
    # for a long time. While ideally they should be made async, this
    # is an interim solution that works for now.
    # This is doubly important for websockets
    proxy_read_timeout 3600s;

    # People upload large files, and that is okay.
    # We can make this larger if need be.
    client_max_body_size 256m;

    # See http://www.gnuterrypratchett.com/
    add_header X-Clacks-Overhead "GNU Terry Pratchett";
    # T279804: Opt-out for Google FLoC tracking
    add_header Permissions-Policy "interest-cohort=()";

    # Protect against http://httpoxy.org/
    # This is enough, since we aren't running any cgi/fastcgi directly from
    # this nginx. We just want to protect downstream users who might be
    proxy_set_header Proxy "";

    # Block clients that do not behave well
    # OruxMaps is flooding our tileserver with requests
    if ($http_user_agent ~ "OruxMaps.*")  { # T97841
        return 403;
    }

    <% if @blocked_user_agent_regex != "" %>
    if ($http_user_agent ~* "<%= @blocked_user_agent_regex -%>") {
        return 403 "Blocked user agent";
    }
    <% end -%>

    <% if @blocked_referer_regex != "" %>
    if ($http_referer ~* "<%= @blocked_referer_regex -%>") {
        return 403 "Blocked referer";
    }
    <% end -%>

    location /.error/ {
        alias /var/www/error/;
        default_type text/html;
    }

    location /.error/banned/ {
        error_page 403 /.error/banned.html;
        return 403;
    }

    location / {
        if ($bad_user) {
            rewrite ^ /.error/banned/;
        }

        # Note: This is only a local 404 handler, not a handler for 404
        # responses from the upstream server. Our access_by_lua_file script
        # should return a 404 status when no proxy has been configured for the
        # current $http_host.
        error_page 404 /.error/noproxy.html;

        set $backend '';
        set $vhost '';

        access_by_lua_file /etc/nginx/lua/domainproxy.lua;

        proxy_pass $backend;
        proxy_set_header Host $vhost;

        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Conditionally passes client's IP to the backend
        proxy_set_header X-Forwarded-For $xff;
    }

    location /.well-known/healthz {
        return 200 'proxy ok!';
    }

    # GZIP (ALMOST) ALL THE THINGS!
    gzip on;
    gzip_proxied any;
    gzip_types text/plain text/css text/xml application/json application/javascript application/x-javascript text/javascript;
}
# vim:sw=4:ts=4:sts=4:et:ft=nginx
