table inet basefirewall {
    set monitoring_ipv4 {
        type ipv4_addr
        <%- if !@monitoring_hosts_ipv4.empty? -%>
        elements = {
        <% @monitoring_hosts_ipv4.each do |addr| -%>
            <%= addr %> ,
        <% end -%>
        }
        <%- end -%>
    }
    set monitoring_ipv6 {
        type ipv6_addr
        <%- if !@monitoring_hosts_ipv6.empty? -%>
        elements = {
        <% @monitoring_hosts_ipv6.each do |addr| -%>
            <%= addr %> ,
        <% end -%>
        }
        <%- end -%>
    }

    set ssh_allowed_ipv4 {
        type ipv4_addr
        <%- if !@bastion_hosts_ipv4.empty? or !@cumin_masters_ipv4.empty? -%>
        elements = {
        <% @bastion_hosts_ipv4.each do |addr| -%>
            <%= addr %> ,
        <% end -%>
        <% @cumin_masters_ipv4.each do |addr| -%>
            <%= addr %> ,
        <% end -%>
        }
        <%- end -%>
    }
    set ssh_allowed_ipv6 {
        type ipv6_addr
        <%- if !@bastion_hosts_ipv6.empty? or !@cumin_masters_ipv6.empty? -%>
        elements = {
        <% @bastion_hosts_ipv6.each do |addr| -%>
            <%= addr %> ,
        <% end -%>
        <% @cumin_masters_ipv6.each do |addr| -%>
            <%= addr %> ,
        <% end -%>
        }
        <%- end -%>
    }

    set prometheus_nodes_ipv4 {
        type ipv4_addr
        <%- if !@prometheus_nodes_ipv4.empty? -%>
        elements = {
        <% @prometheus_nodes_ipv4.each do |addr| -%>
            <%= addr %> ,
        <% end -%>
        }
        <%- end -%>
    }
    set prometheus_nodes_ipv6 {
        type ipv6_addr
        <%- if !@prometheus_nodes_ipv6.empty? -%>
        elements = {
        <% @prometheus_nodes_ipv6.each do |addr| -%>
            <%= addr %> ,
        <% end -%>
        }
        <%- end -%>
    }
    set prometheus_ports {
        type inet_service
        <%- if !@prometheus_ports.empty? -%>
        elements = {
        <% @prometheus_ports.each do |port| -%>
            <%= port %> ,
        <% end -%>
        }
        <%- end -%>
    }

    chain input {
        type filter hook input priority 0 ; policy drop;

        ct state related,established accept
        iifname "lo" accept
        pkttype multicast accept
        meta l4proto ipv6-icmp accept
        ip protocol icmp accept

        ip saddr @monitoring_ipv4 ct state new accept;
        ip6 saddr @monitoring_ipv6 ct state new accept;

        ip saddr @ssh_allowed_ipv4 tcp dport 22 ct state new counter accept;
        ip6 saddr @ssh_allowed_ipv6 tcp dport 22 ct state new counter accept;

        # TODO: we could build a more fine-grained policy for this. We have the use case
        # of different prometheus nodes scraping different endpoints. We could store a hash in
        # hiera and then use here a concatenation like: { prometheus_node_ipv4 . port }. But such
        # situation is rather a corner case, we mostly scrape from the same prometheus node
        ip saddr @prometheus_nodes_ipv4 tcp dport @prometheus_ports ct state new counter accept
        ip6 saddr @prometheus_nodes_ipv6 tcp dport @prometheus_ports ct state new counter accept
    }

    chain output {
        type filter hook output priority 0 ; policy accept;
        counter comment "conter accepted packets"
    }
}
