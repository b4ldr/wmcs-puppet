# Filters for GitLab ECS transition
filter {
  if [program] =~ /input-file-gitlab/ {

# ------------------------------------------------- Global GitLab log filters
    if [ecs.version] {
# drop syslog_cee template fields
      mutate {
        remove_field => [ "host", "program", "severity", "facility" ]
        id => "filter/gitlab/mutate/cleanup_syslog_cee_injected_fields"
      }
    } else {
      mutate {
        add_field => {
          "[ecs][version]" => "1.7.0"
          "[service][type]" => "gitlab"
        }
        id => "filter/gitlab/mutate"
      }

      # build service.name from center part of the program name
      ruby {
        code => "event.set('[service][name]', event.get('program').gsub(/^input-file-/, '').gsub(/(-json|-plain)$/, ''))"
        id => "filter/gitlab/set_service_name"
      }
    }
# ------------------------------------------------- / Global GitLab log filters

# ------------------------------------------------- gitlab-redis filters
    if [program] =~ /redis/ {
      grok {
        match => {
          "message" => [
            "^(?<timestamp>\d+-\d+-\d+_\d+:\d+:\d+\.\d+).*\* %{GREEDYDATA:message}$"
          ]
        }
        overwrite => [ "message" ]
        named_captures_only => true
        id => "filter/gitlab/redis/grok"
      }
    }
# ------------------------------------------------- / gitlab-redis filters

# ------------------------------------------------- gitlab-nginx-error filters
    if [program] =~ /nginx-error/ {
      grok {
        match => {
          "message" => [
            "^(?<timestamp>\d+/\d+/\d+ \d+:\d+:\d+) \[%{WORD:[log][level]}\] %{NUMBER:[process][pid]}#%{NUMBER:[process][thread][id]}: \*%{NUMBER:[labels][connection_id]} %{GREEDYDATA:message}$"
          ]
        }
        overwrite => [ "message", "[log][level]" ]
        named_captures_only => true
        id => "filter/gitlab/nginx-error/grok"
      }
      ruby {
        code => 'event.set("[event][type]", ["error", "connection"]); event.set("[event][category]", ["network", "web"])'
      }
      mutate {
        replace => {
          "[service][type]" => "nginx"
          "[event][dataset]" => "nginx.error"
          "[event][kind]" => "event"
        }
      }
    }
# ------------------------------------------------- / gitlab-nginx-error filters

# ------------------------------------------------- GitLab JSON log transformations
    if [program] =~ /json/ {
      # GitLab JSON logs arrive dot-delimited.  Apply de_dot to mitigate expansion in 17-filter_ecs.
      de_dot {
        id => "filter/gitlab/json/de_dot"
      }

      # Set to the side these fields.
      mutate {
        rename => {
          "host" => "original_host"
          "user_agent" => "original_user_agent"
        }
      }

      mutate {
        rename => {
          "time" => "timestamp"
          "logsource" => "[host][name]"
          "msg" => "message"
          "grpc_code" => "[labels][code]"
          "grpc_meta_client_name" => "[labels][client_name]"
          "grpc_request_glProjectPath" => "[labels][project_path]"
          "grpc_request_glRepository" => "[labels][repository]"
          "grpc_request_repoPath" => "[labels][repo_path]"
          "grpc_request_repoStorage" => "[labels][repo_storage]"
          "grpc_service" => "log.logger"
          "grpc_request_fullMethod" => "log.origin.function"
          "error" => "[error][message]"
          "grpc_time_ms" => "[event][duration]"
          "correlation_id" => "[trace][id]"
          "pid" => "[process][pid]"
          "remote_ip" => "[client][ip]"
          "username" => "[user][name]"
          "user_id" => "[user][id]"
          "ua" => "[user_agent][original]"
          "status" => "[http][response][status_code]"
          "method" => "[http][request][method]"
          "path" => "[url][path]"
          "controller" => "log.logger"
          "action" => "log.origin.function"
          "duration_s" => "[event][duration]"
          "uri" => "[url][path]"
        }
        id => "filter/gitlab/json/mutate"
      }
    }
# ------------------------------------------------- / GitLab JSON log transformations

# ------------------------------------------------- GitLab stream-specific amendments
    # Some fields best come from other fields in these streams
    if [program] == "input-file-gitlab-rails-api-json" {
      mutate {
        replace => {
          "[client][ip]" => "%{meta_remote_ip}"
          "[url][domain]" => "%{original_host}"
        }
      }
    }
    if [program] == "input-file-gitlab-workhorse-json" {
      mutate {
        replace => {
          "[url][domain]" => "%{original_host}"
          "[user_agent][original]" => "%{original_user_agent}"
        }
      }
    }
    if [program] == "input-file-gitlab-sidekiq-json" {
      mutate {
        rename => {
          "meta_remote_ip" => "[client][ip]"
        }
      }
    }
# ------------------------------------------------- / GitLab stream-specific amendments
  }
}
