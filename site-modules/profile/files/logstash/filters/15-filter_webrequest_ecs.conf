# Filters for webrequest to ECS migration
filter {
  if [program] == "webrequest" {
    clone {
      clones => ["webrequest-ecs"]
      id => "filter/webrequest_ecs/clone"
    }
    if [type] == "webrequest-ecs" {

      # Create copies of uri_query and uri_path to reconstruct url.original with url-encoded values.
      # Rename user_agent field to free the key up for replacement with an object
      # Remove host field to free the key up for replacement with an object
      mutate {
        copy => {
          "uri_query" => "[url][query]"
          "uri_path" => "[url][path]"
        }
        rename => {
          "user_agent" => "original_user_agent"
        }
        remove_field => [ "host" ]
        id => "filter/webrequest_ecs/mutate/stage_1"
      }

      urldecode {
        field => "[url][query]"
        id => "filter/urldecode/webrequest_ecs/query"
      }

      urldecode {
        field => "[url][path]"
        id => "filter/urldecode/webrequest_ecs/path"
      }

      if [tls] == "-" {
        mutate {
          add_field => { "[url][scheme]" => "http" }
          id => "filter/urldecode/webrequest_ecs/scheme_http"
        }
      } else {
        mutate {
          add_field => { "[url][scheme]" => "https" }
          id => "filter/urldecode/webrequest_ecs/scheme_https"
        }
      }

      mutate {
        add_field => {
          "[ecs][version]" => "1.7.0"
          "[url][original]" => "%{[url][scheme]}://%{[url][domain]}%{uri_path}%{uri_query}"
          "[service][name]" => "%{[service][type]}-%{[labels][channel]}"
        }
        rename => {
          "dt" => "timestamp"
          "backend" => "[service][type]"
          "hostname" => "[host][name]"
          "uri_host" => "[url][domain]"
          "referer" => "[http][request][headers][referer]"
          "accept" => "[http][request][headers][accept]"
          "accept_language" => "[http][request][headers][accept-language]"
          "content_type" => "[http][response][headers][content-type]"
          "x_analytics" => "[http][response][headers][x-analytics]"
          "x_cache" => "[http][response][headers][x-cache]"
          "http_status" => "[http][response][status_code]"
          "response_size" => "[http][response][bytes]"
          "original_user_agent" => "[user_agent][original]"
          "http_method" => "[http][request][method]"
          "ip" => "[client][ip]"
          "time_firstbyte" => "[metrics][ttfb][seconds]"
          "sequence" => "[event][sequence]"
          "range" => "[labels][range]"
          "program" => "[labels][channel]"
          "tls" => "[labels][tls]"
          "cache_status" => "[labels][cache_status]"
        }
        lowercase => [ "[service][type]" ]
        id => "filter/webrequest_ecs/mutate/stage_2"
      }
    }
  }
}
