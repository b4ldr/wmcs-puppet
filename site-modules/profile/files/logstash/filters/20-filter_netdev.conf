# vim:set sw=2 ts=2 sts=2 et
# Parse Network related syslog
# Note: Juniper prepend its messages with "%-"
filter {
  if [type] == "netdev" {

    # General syslog message cleanup
    mutate {
      replace => [ "host", "%{logsource}" ]
      add_tag => [ "syslog", "es" ]
      id => "filter/mutate/netdev/es"
    }

    mutate {
      # "\n" newline notation in substitution results in "\\n" in output.
      # Using a string with a literal newline works as desired.
      gsub => [ "message", "#012", '
' ]
      id => "filter/mutate/netdev/newline"
    }

    grok {
      match => {
        "message" => [
          "PFE_FW_SYSLOG_ETH_IP6_TCP_UDP: FW: %{DATA:interface.name}\s+%{WORD:event.action} %{DATA:network.vlan.id} %{MAC:source.mac} -> %{MAC:destination.mac}\s+%{WORD:network.transport} SA %{IPV6:source.ip}\s+-> DA %{IPV6:destination.ip}\s+%{NONNEGINT:source.port} dport:\s+%{NONNEGINT:destination.port} \(%{NONNEGINT:source.packets} packets\)",
          "PFE_FW_SYSLOG_ETH_IP6_ICMP: FW: %{DATA:interface.name}\s+%{WORD:event.action} %{DATA:network.vlan.id} %{MAC:source.mac} -> %{MAC:destination.mac}\s+%{WORD:network.transport} SA %{IPV6:source.ip}\s+-> DA %{IPV6:destination.ip}\s+type\s+%{NONNEGINT:icmp.type} code\s+%{NONNEGINT:icmp.code} \(%{NONNEGINT:source.packets} packets\)",
          "PFE_FW_SYSLOG_ETH_IP: FW: %{DATA:interface.name}\s+%{WORD:event.action} %{DATA:network.vlan.id} %{MAC:source.mac} -> %{MAC:destination.mac}\s+%{WORD:network.transport} %{IPV4:source.ip} %{IPV4:destination.ip}\s+%{NONNEGINT:source.port}\s+%{NONNEGINT:destination.port} \(%{NONNEGINT:source.packets} packets\)"
          ]
      }
      add_tag => [ "firewall" ]
      tag_on_failure => [ ]
      id => "filter/grok/netdev/pfe_fw_1"
    }
  }
}
