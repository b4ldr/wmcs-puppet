# vim:set sw=2 ts=2 sts=2 et
# Parse Network related syslog
# Note: Juniper prepend its messages with "%-"
filter {
  if [service][type] == "netdev" {

    # Extract console from hostname
    ruby {
      code => '
        host_field = event.get("host")
        if host_field["name"].match?(/^re[0-99]\./)
          c, h = host_field["name"].split(".")
          event.set("labels", {"console" => c})
          host_field["name"] = h
          event.set("host", host_field)
        end
        [event]
      '
      id => "filter/ruby/netdev-ecs/console-from-hostname"
    }

    grok {
      match => {
        "[log][original]" => [
          "PFE_FW_SYSLOG_ETH_IP6_TCP_UDP: FW: %{DATA:[observer][ingress][interface][name]}\s+%{WORD:[event][action]} %{DATA:[network][vlan][name]} %{MAC:[source][mac]} -> %{MAC:[destination][mac]}\s+%{WORD:[network][transport]} SA %{IPV6:[source][ip]}\s+-> DA %{IPV6:[destination][ip]}\s+%{NONNEGINT:[source][port]} dport:\s+%{NONNEGINT:[destination][port]} \(%{NONNEGINT:[source][packets]} packets\)",
          "PFE_FW_SYSLOG_ETH_IP6_ICMP: FW: %{DATA:[observer][ingress][interface][name]}\s+%{WORD:[event][action]} %{DATA:[network][vlan][name]} %{MAC:[source][mac]} -> %{MAC:[destination][mac]}\s+%{WORD:[network][transport]} SA %{IPV6:[source][ip]}\s+-> DA %{IPV6:[destination][ip]}\s+type\s+%{NONNEGINT:[icmp][type]} code\s+%{NONNEGINT:[icmp][code]} \(%{NONNEGINT:[source][packets]} packets\)",
          "PFE_FW_SYSLOG_ETH_IP: FW: %{DATA:[observer][ingress][interface][name]}\s+%{WORD:[event][action]} %{DATA:[network][vlan][name]} %{MAC:[source][mac]} -> %{MAC:[destination][mac]}\s+%{WORD:[network][transport]} %{IPV4:[source][ip]} %{IPV4:[destination][ip]}\s+%{NONNEGINT:[source][port]}\s+%{NONNEGINT:[destination][port]} \(%{NONNEGINT:[source][packets]} packets\)"
        ]
      }
      add_tag => [ "firewall" ]
      id => "filter/grok/netdev-ecs/pfe_fw_1"
    }
  }
}
