#!/bin/sh

# Simple script that substitutes "git pull" but making sure that:
# - the working tree has no untracked files
# - the working tree has no unstaged changes
# - the working tree has no staged but uncommited changes
# - the working tree has no commits that are not present in FETCH_HEAD
# - the user has reviewed and accepted the changes (unless --skip-review is given)
#
# This is basically estabilishing that the repository is being used as a
# replica and that a "pull" would only resync with remote
#
# Created by Faidon Liambotis, Jul 2013

REVIEW="true"
if [ "$1" = "--skip-review" ]; then
    REVIEW="false"
    shift
fi
REMOTE=$1
BRANCH=$2

die() { echo >&2 "E: $*"; exit 1; }

if [ -z "$REMOTE" ]; then
    die "no remote specified"
elif [ -z "$BRANCH" ]; then
    BRANCH="master"
fi

if test "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = false; then
    die "not inside a working tree"
fi

if ! git rev-parse --verify $BRANCH >/dev/null; then
    die "could not verify $BRANCH"
fi

if [ $(git rev-parse HEAD) != $(git rev-parse $BRANCH) ]; then
    cur=$(git rev-parse --abbrev-ref HEAD)
    die "working tree HEAD is pointed to '$cur', not '$BRANCH'"
fi

untracked=$(git ls-files --exclude-standard --others)
if [ "$untracked" != "" ]; then
    die "untracked files present: $untracked"
fi

if ! git diff-files --quiet --ignore-submodules; then
    die "unstaged changes present"
fi

if ! git diff-index --cached --quiet --ignore-submodules HEAD --; then
    die "staged but uncommited changes present"
fi

if ! git fetch $REMOTE $BRANCH 2>/dev/null; then
    die "could not fetch $REMOTE $BRANCH"
fi

# store FETCH_HEAD here to avoid race conditions
HEAD=$(git rev-parse --verify --revs-only HEAD)
NEW=$(git rev-parse --verify --revs-only FETCH_HEAD)

if [ "$HEAD" = "$NEW" ]; then
    # up-to-date, nothing to do
    exit 0
fi

revlist=$(git rev-list -1 $HEAD --not $NEW)
if [ "$revlist" != "" ]; then
    echo $revlist
    die "HEAD has diverged from $REMOTE, please reconcile first"
fi


if [ "$REVIEW" = "true" ]; then
    echo "Reviewing ${NEW}..."
    echo ""
    PAGER="" git diff -p --stat --no-prefix --minimal --color ${HEAD}..${NEW}
    echo ""
    echo -n "Merge these changes? (yes/no)? "
    read answer
    if [ "x${answer}" != "xyes" ]; then
        echo "Aborting merge."
        exit 1
    fi
fi

git merge --ff-only $NEW
exit 0
