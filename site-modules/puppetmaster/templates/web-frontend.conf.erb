<%-
def get_addresses(hostname)
  return [hostname] if hostname =~ Resolv::IPv4::Regex or hostname =~ Resolv::IPv6::Regex
  # Resolv.getaddresses will not return IPv6 addreses if the host does not speak IPv6
  # This is mainly an issues for the spec tests but its more precises either way
  answers = []
  Resolv::DNS.open do |dns|
    [Resolv::DNS::Resource::IN::A, Resolv::DNS::Resource::IN::AAAA].each do |rrtype|
      answer = dns.getresources(hostname, rrtype)
      next if answer.empty?
      answers << answer.map { |ans| ans.address.to_s }
    end
  end
  raise Puppet::Error, "#{hostname} has no IP addresses" if answers.empty?
  answers.flatten.sort
end
-%>
# Experimental virtualhost to test new puppetmaster backends
<VirtualHost <%= @bind_address %>:8140>
    ServerName <%= @server_name %>
<%- if @alt_names %>    ServerAlias <%= @alt_names.sort.join(" ") %><% end %>
    SSLEngine on
    <%= @ssl_settings.join("\n    ") %>
    SSLCertificateFile      <%= @facts['puppet_config']['ssldir'] %>/certs/<%= @server_name %>.pem
    SSLCertificateKeyFile   <%= @facts['puppet_config']['ssldir'] %>/private_keys/<%= @server_name %>.pem
    SSLCACertificateFile    <%= @facts['puppet_config']['master']['localcacert'] %>
    SSLCertificateChainFile <%= @facts['puppet_config']['master']['localcacert'] %>
    # If Apache complains about invalid signatures on the CRL, you can try disabling
    # CRL checking by commenting the next line, but this is not recommended.
    # NOTE: https://tickets.puppetlabs.com/browse/PUP-2310 says that CRL is not updated. Need to reevaluate this
    SSLCARevocationPath     <%= scope.lookupvar('::puppetmaster::ssl::ssldir') %>/crl
    <% if @ssl_ca_revocation_check -%>
    SSLCARevocationCheck    <%= @ssl_ca_revocation_check %>
    <% end -%>
    SSLVerifyClient <%= scope.lookupvar('puppetmaster::verify_client') %>
    SSLVerifyDepth  <%= @ssl_verify_depth %>
    SSLOptions +StdEnvVars

    # The connection to the backends is also SSL encrypted but by frontend and backends do not authenticate connections
    # These request headers are used to pass the client certificate
    # authentication information on to the puppet master process
    RequestHeader set X-SSL-Subject %{SSL_CLIENT_S_DN}e
    RequestHeader set X-Client-DN %{SSL_CLIENT_S_DN}e
    RequestHeader set X-Client-Verify %{SSL_CLIENT_VERIFY}e

    SSLProxyEngine on
    RewriteEngine On
    <%- if @locale_server -%>
    # proxy requests to locale metadata to the correct puppetmaster
    RewriteRule ^/puppet/v3/(file_content|file_metadatas?)/locales https://<%= @locale_server %>:8141%{REQUEST_URI} [P,QSA]
    <%- end -%>
    # Certificates requests should only be in the master.
    RewriteRule ^/puppet-ca/.*$ https://<%= @master %>:8141%{REQUEST_URI} [P,QSA]
    # This legacy API is still used by cergen, and only the master can serve it.
    RewriteRule ^/[^/]+/certificate.*$ https://<%= @master %>:8141%{REQUEST_URI} [P,QSA]
    # File buckets should only be in one place per site. Choosing the frontend by default for simplicity
    RewriteRule ^/puppet/v3/file_bucket_file/md5/ https://<%= @fqdn %>:8141%{REQUEST_URI} [P,QSA]
    # volatile should only be in one place per site. Choosing the frontend by default for simplicity
    RewriteRule ^/puppet/v3/(file_content|file_metadatas?)/volatile/ https://<%= @fqdn %>:8141%{REQUEST_URI} [P,QSA]
    # The rest gets balanced

    <%-# only add canary config if we have a canary worker and canary hosts -%>
    <%- if @workers.any? { |worker| worker.has_key?('canary') } && @canary_hosts.any? -%>
      <%- @canary_hosts.each do |canary_host| -%>
        <%- addresses = get_addresses(canary_host) -%>
        <%- addresses.each do |ip| -%>
    RewriteCond expr "-R '<%= ip %>'"<% unless ip == addresses.last and canary_host == @canary_hosts.last %> [OR]<% end %>
        <%- end -%>
      <%- end -%>
    RewriteRule ^ balancer://canarybackend%{REQUEST_URI} [P,QSA]
    <Proxy balancer://canarybackend>
      <%- @workers.each do |workerhash| -%>
        <%- next if workerhash['offline'] || !workerhash['canary'] -%>
        BalancerMember https://<%= workerhash['worker'] %>:8141 ping=1 connectiontimeout=1 retry=500 timeout=900 loadfactor=<%= workerhash['loadfactor'] %>
      <%- end -%>
      Require all granted
    </Proxy>
  <%- end -%>
    ProxyPass / balancer://backend/
    <Proxy balancer://backend>
      <%- @workers.each do |workerhash| -%>
        <%-# !! casts nil to boolean i-%>
        <%- next if workerhash['offline'] || !!workerhash['canary'] -%>
        BalancerMember https://<%= workerhash['worker'] %>:8141 ping=1 connectiontimeout=1 retry=500 timeout=900 loadfactor=<%= workerhash['loadfactor'] %>
      <%- end -%>
      Require all granted
    </Proxy>
    CustomLog /var/log/apache2/puppetmaster.<%= @server_name %>.log wmf
</VirtualHost>
